using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using ClientWebService;
using Xamarin.Forms;

namespace BikeBook.Views
{
    public class ProfileMain : ContentPage
    {

        ImageSelectionDialog m_imageSelectionDialog;
        User m_loadedProfile;

        private GeneralPageTemplate m_mainTemplate;
        
        // Main layout, holds page contents
        private StackLayout m_profileContent;

        // Layout for profile header, contains banner image and inset profile picture
        private RelativeLayout m_imageHeader;

        // Images contained within header
        private Image m_bannerImage;
        private Image m_profileImage;

        // Basic details on user's profile
        private Label m_profileName;

        private Grid m_infoGrid;
        private Label m_ridingStyles;
        //private Label m_hometown;
        //private Label m_numFollowers;

        // TODO: Build gallery widget to show small excerpt of user's photo gallery
        //private Grid m_Grid_PostedPhotos;

        // Toolbars for getting around and doing things with this profile
        private ButtonBar m_profileInteraction;
        private ButtonBar m_profileNavigation;


        /**
         * Class Contructor for profile main page
         */
        public ProfileMain()
        {
            m_imageSelectionDialog = new ImageSelectionDialog(this);

            GuiLayout();
        }

        /**
         * Class Contructor for profile main page
         */
        public ProfileMain(string userEmail)
        {
            m_imageSelectionDialog = new ImageSelectionDialog(this);
            Service WebService = Service.Instance;
            Users AllUsers = WebService.GetAllUsers(WebService.Email);
            m_loadedProfile = AllUsers.user.Find((compare) => { return (compare.email.Equals(userEmail)); });
            GuiLayout();
            PopulateContent();
        }


        /**
         * Lays out and displays page UI
         */
        private void GuiLayout()
        { 
            NavigationPage.SetHasNavigationBar(this, false);

            BannerImageLayout();

            m_profileName = new Label() { TextColor = Color.FromHex(UIColors.COLOR_PRIMARY_TEXT), FontSize = Device.GetNamedSize(NamedSize.Large, typeof(Label)), HorizontalOptions = LayoutOptions.Center };

            ProfileInteractionLayout();
            m_infoGrid        = new Grid()
            {
<<<<<<< Updated upstream
                Padding = UISizes.PADDING_STANDARD,
=======
                Padding = UIConstants.PADDING_STANDARD,
>>>>>>> Stashed changes
                HorizontalOptions = LayoutOptions.Fill,
                BackgroundColor = Color.FromHex(UIColors.COLOR_GENERAL_ACCENT),
                ColumnDefinitions =
                {
                    new ColumnDefinition() { Width = GridLength.Auto }, 
                },
                RowDefinitions =
                {
                    new RowDefinition() { Height = GridLength.Auto },
                    //new RowDefinition() { Height = GridLength.Auto },
                    //new RowDefinition() { Height = GridLength.Auto },
                },
            };
            m_ridingStyles         = new Label();
            m_ridingStyles.ApplyDefaultAppearance();
            m_infoGrid.Children.Add(m_ridingStyles, 0, 0);
            //m_hometown        = new Label();
            //m_numFollowers    = new Label();                                                                              
            
            //m_Grid_PostedPhotos = new Grid();

            ProfileNavigationLayout();

            m_profileContent = new StackLayout()
            {
                Spacing = UISizes.SPACING_STANDARD,
                VerticalOptions = LayoutOptions.StartAndExpand,
                HorizontalOptions = LayoutOptions.CenterAndExpand,
                Orientation = StackOrientation.Vertical,
                Children =
                {
                    m_imageHeader,
                    m_profileName,
                    m_profileInteraction,
                    m_infoGrid,
                    //m_hometown,
                    //m_numFollowers,
                    //m_Grid_PostedPhotos,
                    m_profileNavigation,
                },
            };
            m_mainTemplate = new GeneralPageTemplate()
            {
                Content = m_profileContent,
            };
            
            Content = m_mainTemplate;


            m_bannerImage.AddSingleTapHandler(editableImage_Tapped);
            m_profileImage.AddSingleTapHandler(editableImage_Tapped);
        }


        /** Placeholder function for roughing in layout
         */
        void DummyOnClickAction()
        { }

        /**
         * Builds layout for profile banner, incl. user-selected banner image and profile picture
         */
        private void BannerImageLayout()
        {
            RelativeLayoutConstraintBuilder constraintBuilder = new RelativeLayoutConstraintBuilder();

            m_imageHeader = new RelativeLayout()
            {
                HorizontalOptions = LayoutOptions.CenterAndExpand,
                VerticalOptions = LayoutOptions.Start
            };

            m_bannerImage = new Image()
            {
                Aspect = Aspect.AspectFill,
                Source = UIImages.PHOTOPLACEHOLDER,
            };

            m_profileImage = new Image()
            {
                HeightRequest = UISizes.PROFILE_IMAGE_HEIGHT,
                WidthRequest = UISizes.PROFILE_IMAGE_WIDTH,
                Aspect = Aspect.AspectFill,
                Source = UIImages.PHOTOPLACEHOLDER,
            };

            Constraint VertCenter = Constraint.RelativeToParent((parent) => { return (parent.Width / 2) - (m_profileImage.WidthRequest / 2); });

            FixedAspectGUIContainer bannerContainer = new FixedAspectGUIContainer()
            {
                AspectRatio = 0.33,
                Content = m_bannerImage,
            };

            m_imageHeader.Children.Add(bannerContainer,
                null,
                null,
                null,
                constraintBuilder.Constant(UISizes.BANNER_IMAGE_HEIGHT));
            m_imageHeader.Children.Add(m_profileImage,
                VertCenter,
                constraintBuilder.SiblingHeightPercent(bannerContainer, 0.66));
        }


        /** 
         * Builds layout fopr profile interaction toolbar
         */
        private void ProfileInteractionLayout()
        {
            m_profileInteraction = new ButtonBar() { HorizontalOptions = LayoutOptions.FillAndExpand };
            m_profileInteraction.AddImageButton(UIImages.ICONPOST, null);
            m_profileInteraction.AddImageButton(UIImages.ICONUPDATEINFO, null);
            m_profileInteraction.AddImageButton(UIImages.ICONACTIVITYLOG, null);
            m_profileInteraction.AddImageButton(UIImages.ICONMORE, null);
        }


        /**
         * Builds layout for profile navigation toolbar
         */
        private void ProfileNavigationLayout()
        {
            m_profileNavigation = new ButtonBar() { HorizontalOptions = LayoutOptions.FillAndExpand };
            m_profileNavigation.AddTextButton("About", null);
            m_profileNavigation.AddTextButton("Photos", null);
            m_profileNavigation.AddTextButton("Friends", null);
        }


        /**
         * Callback to handle user clicking to add/change Profile Banner
         *
         * @param object sender - TODO
         * @param EventArgs e - TODO
         */
        private async void editableImage_Tapped(object sender, EventArgs e)
        {
            await m_imageSelectionDialog.GetImage((Image)sender);
        }


        /**
         * Populates UI with loaded user profile
         */
        private void PopulateContent()
        {
            try
            {
                m_profileName.Text = m_loadedProfile.name;
                m_ridingStyles.Text = BuildRidingStylesString(m_loadedProfile);
            }
            catch
            {
                DisplayAlert("Error", "Could not load a profile to display here", "OK").Wait();
                Navigation.PopAsync();
            }
        }

        private string BuildRidingStylesString(User profile)
        {
            string returnString = string.Empty;

            if (profile.styleAdventure.Equals("true"))
                returnString += "Adventure";
            if (profile.styleCommuting.Equals("true"))
            {
                if (returnString.Length > 0)
                    returnString += " - ";
                returnString += "Commuting";
            }
            if (profile.styleCruising.Equals("true"))
            {
                if (returnString.Length > 0)
                    returnString += " - ";
                returnString += "Cruising";
            }
            if (profile.styleSport.Equals("true"))
            {
                if (returnString.Length > 0)
                    returnString += " - ";
                returnString += "Sport";
            }
            if (profile.styleTouring.Equals("true"))
            {
                if (returnString.Length > 0)
                    returnString += " - ";
                returnString += "Touring";
            }
            if (profile.styleTrack.Equals("true"))
            {
                if (returnString.Length > 0)
                    returnString += " - ";
                returnString += "Track";
            }

            return returnString;
        }
    }
}
